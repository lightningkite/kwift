package com.lightningkite.khrysalis.typescript

import com.lightningkite.khrysalis.generic.FileEmitter
import com.lightningkite.khrysalis.replacements.Import
import com.lightningkite.khrysalis.replacements.TemplatePart
import com.lightningkite.khrysalis.typescript.replacements.TypescriptImport
import com.lightningkite.khrysalis.util.SmartTabWriter
import com.lightningkite.khrysalis.util.fqNamesToCheck
import com.lightningkite.khrysalis.util.simpleFqName
import com.lightningkite.khrysalis.util.simplerFqName
import org.jetbrains.kotlin.cli.common.messages.CompilerMessageSeverity
import org.jetbrains.kotlin.descriptors.*
import org.jetbrains.kotlin.load.java.descriptors.JavaPropertyDescriptor
import org.jetbrains.kotlin.psi.KtFile
import org.jetbrains.kotlin.resolve.descriptorUtil.fqNameOrNull
import org.jetbrains.kotlin.resolve.descriptorUtil.fqNameSafe
import org.jetbrains.kotlin.resolve.descriptorUtil.getImportableDescriptor
import org.jetbrains.kotlin.synthetic.SyntheticJavaPropertyDescriptor
import java.io.BufferedWriter
import java.io.File

class TypescriptFileEmitter(val translator: TypescriptTranslator, file: KtFile) : FileEmitter(file) {
    val stringBuilder = StringBuilder()
    val out = SmartTabWriter(stringBuilder)
    private val imports = HashSet<TypescriptImport>()

    companion object {
        val overwriteWarning = "// Generated by Khrysalis TypeScript converter - this file will be overwritten."
    }

    fun write(writer: BufferedWriter, file: KtFile) {
        render(writer)
        writer.flush()
    }

    //Map of FQ name to import info
    fun addImport(path: String, identifier: String, asName: String? = null) {
        imports.add(TypescriptImport(TypescriptImport.FileInfo("butterfly-web", path), identifier, asName))
    }

    private fun addImportFromFq(fqName: String, name: String): Boolean {
        val newImport = translator.declarations.importLine(
            currentRelativeFile = File(file.virtualFilePath.removePrefix(translator.commonPath).removeSuffix(".kt").plus(".ts")),
            fqName = fqName,
            name = name
        )
        if(newImport != null) {
            addImport(newImport)
            return true
        }
        return false
    }

    override fun addImport(import: Import) {
        imports.add(import as TypescriptImport)
    }

    override fun renderImports(to: Appendable) {
        val relPath = File(file.virtualFilePath.removePrefix(translator.commonPath)) //TODO not quite right
        TypescriptImport.render(translator.projectName ?: "", File(/*output path*/), relPath, imports, to)
//        renderImports(translator.projectName, relPath, imports.values, to)
    }

    override fun sub(): FileEmitter = TypescriptFileEmitter(translator, file)
}